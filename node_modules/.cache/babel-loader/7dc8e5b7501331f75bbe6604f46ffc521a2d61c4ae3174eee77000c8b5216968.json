{"ast":null,"code":"import React, { createContext, useEffect, useState } from \"react\";\nimport ArcPath from \"./ArcPath\";\nimport LegendItem from \"./LegendItem\";\nexport const DonutChartContext = /*#__PURE__*/createContext(undefined);\nconst DonutChart = _ref => {\n  let {\n    className = \"donutchart\",\n    clickToggle = true,\n    colorFunction = (colors, index) => colors[index % colors.length],\n    colors = [\"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\", \"#2196f3\", \"#03a9f4\", \"#00bcd4\", \"#009688\", \"#4caf50\", \"#8bc34a\", \"#cddc39\", \"#ffeb3b\", \"#ffc107\", \"#ff9800\", \"#ff5722\", \"#795548\", \"#607d8b\"],\n    data = [{\n      className: \"\",\n      label: \"\",\n      value: 100,\n      isEmpty: true\n    }],\n    emptyColor = \"#e0e0e0\",\n    emptyOffset = 0.08,\n    formatValues = (value, total) => Number.isNaN(value / total) ? \"--\" : `${(value / total * 100).toFixed(2)}%`,\n    height = 500,\n    interactive = true,\n    innerRadius = 0.7,\n    legend = true,\n    onMouseEnter = item => item,\n    onMouseLeave = item => item,\n    onClick = (item, toggled) => toggled ? item : null,\n    outerRadius = 0.9,\n    selectedOffset = 0.03,\n    strokeColor = \"#212121\",\n    toggledOffset = 0.04,\n    width = 750\n  } = _ref;\n  const [selected, setSelected] = useState(interactive ? data[0] : null);\n  const [toggleSelect, setToggleSelect] = useState(false);\n  useEffect(() => {\n    if (interactive) {\n      setSelected(data[0]);\n      setToggleSelect(false);\n    }\n  }, [interactive, data]);\n  const graphWidth = legend ? width * (2 / 3) : width;\n  const total = data.reduce((sum, _ref2) => {\n    let {\n      value\n    } = _ref2;\n    return sum + value;\n  }, 0);\n  const {\n    dataWithRenderProps\n  } = data.reduce((_ref3, item, index) => {\n    let {\n      angle,\n      dataWithRenderProps\n    } = _ref3;\n    const {\n      className,\n      isEmpty,\n      label,\n      value\n    } = item;\n    const isSelected = (selected === null || selected === void 0 ? void 0 : selected.label) === label;\n    const isToggled = isSelected && toggleSelect;\n    return {\n      angle: angle + value / total * 360,\n      dataWithRenderProps: [...dataWithRenderProps, {\n        angle,\n        index,\n        ...item,\n        classNames: `${className ?? \"\"} ${isEmpty ? \"empty\" : \"\"} ${isSelected ? \"selected\" : \"\"} ${isToggled ? \"toggled\" : \"\"}`.trim(),\n        fill: isEmpty ? emptyColor : colorFunction(colors, index),\n        opacity: isSelected && !toggleSelect ? 0.5 : 1,\n        stroke: isEmpty ? emptyColor : strokeColor,\n        clickHandlers: interactive ? {\n          onClick: () => {\n            if ((selected === null || selected === void 0 ? void 0 : selected.label) === label) {\n              const toggle = clickToggle ? !toggleSelect : false;\n              setSelected(item);\n              setToggleSelect(toggle);\n              onClick(item, toggle);\n            }\n          },\n          onMouseEnter: () => {\n            if (!toggleSelect) {\n              setSelected(item);\n              onMouseEnter(item);\n            }\n          },\n          onMouseLeave: () => {\n            if (!toggleSelect) {\n              onMouseLeave(item);\n            }\n          }\n        } : undefined\n      }],\n      total: total + value\n    };\n  }, {\n    angle: 0,\n    dataWithRenderProps: []\n  });\n  return /*#__PURE__*/React.createElement(DonutChartContext.Provider, {\n    value: {\n      className,\n      emptyOffset,\n      graphWidth,\n      innerRadius,\n      outerRadius,\n      selected,\n      selectedOffset,\n      toggledOffset,\n      toggleSelect,\n      total,\n      width\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    className: className,\n    style: {\n      height,\n      width\n    },\n    viewBox: `0 0 ${width} ${height}`\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    className: `${className}-arcs`\n  }, dataWithRenderProps.map(item => /*#__PURE__*/React.createElement(ArcPath, {\n    item: item,\n    key: `arcpath${item.index}`\n  }))), selected && /*#__PURE__*/React.createElement(\"g\", {\n    className: `${className}-innertext`\n  }, /*#__PURE__*/React.createElement(\"text\", {\n    className: `${className}-innertext-label`,\n    x: graphWidth / 2,\n    y: \"45%\",\n    textAnchor: \"middle\"\n  }, selected.label), /*#__PURE__*/React.createElement(\"text\", {\n    className: `${className}-innertext-value`,\n    x: graphWidth / 2,\n    y: \"60%\",\n    textAnchor: \"middle\"\n  }, formatValues(selected.value, total))), legend && /*#__PURE__*/React.createElement(\"g\", {\n    className: `${className}-legend`\n  }, dataWithRenderProps.map(item => /*#__PURE__*/React.createElement(LegendItem, {\n    key: `legenditem${item.index}`,\n    item: item\n  })))));\n};\nexport default DonutChart;","map":{"version":3,"names":["React","createContext","useEffect","useState","ArcPath","LegendItem","DonutChartContext","undefined","DonutChart","className","clickToggle","colorFunction","colors","index","length","data","label","value","isEmpty","emptyColor","emptyOffset","formatValues","total","Number","isNaN","toFixed","height","interactive","innerRadius","legend","onMouseEnter","item","onMouseLeave","onClick","toggled","outerRadius","selectedOffset","strokeColor","toggledOffset","width","selected","setSelected","toggleSelect","setToggleSelect","graphWidth","reduce","sum","dataWithRenderProps","angle","isSelected","isToggled","classNames","trim","fill","opacity","stroke","clickHandlers","toggle","createElement","Provider","style","viewBox","map","key","x","y","textAnchor"],"sources":["C:/Users/Luis Eduardo/Desktop/front-proyecto-final/node_modules/react-donut-chart/dist/DonutChart.js"],"sourcesContent":["import React,{createContext,useEffect,useState}from\"react\";import ArcPath from\"./ArcPath\";import LegendItem from\"./LegendItem\";export const DonutChartContext=/*#__PURE__*/createContext(undefined);const DonutChart=({className=\"donutchart\",clickToggle=true,colorFunction=(colors,index)=>colors[index%colors.length],colors=[\"#f44336\",\"#e91e63\",\"#9c27b0\",\"#673ab7\",\"#3f51b5\",\"#2196f3\",\"#03a9f4\",\"#00bcd4\",\"#009688\",\"#4caf50\",\"#8bc34a\",\"#cddc39\",\"#ffeb3b\",\"#ffc107\",\"#ff9800\",\"#ff5722\",\"#795548\",\"#607d8b\"],data=[{className:\"\",label:\"\",value:100,isEmpty:true}],emptyColor=\"#e0e0e0\",emptyOffset=0.08,formatValues=(value,total)=>Number.isNaN(value/total)?\"--\":`${(value/total*100).toFixed(2)}%`,height=500,interactive=true,innerRadius=0.7,legend=true,onMouseEnter=item=>item,onMouseLeave=item=>item,onClick=(item,toggled)=>toggled?item:null,outerRadius=0.9,selectedOffset=0.03,strokeColor=\"#212121\",toggledOffset=0.04,width=750})=>{const[selected,setSelected]=useState(interactive?data[0]:null);const[toggleSelect,setToggleSelect]=useState(false);useEffect(()=>{if(interactive){setSelected(data[0]);setToggleSelect(false)}},[interactive,data]);const graphWidth=legend?width*(2/3):width;const total=data.reduce((sum,{value})=>sum+value,0);const{dataWithRenderProps}=data.reduce(({angle,dataWithRenderProps},item,index)=>{const{className,isEmpty,label,value}=item;const isSelected=(selected===null||selected===void 0?void 0:selected.label)===label;const isToggled=isSelected&&toggleSelect;return{angle:angle+value/total*360,dataWithRenderProps:[...dataWithRenderProps,{angle,index,...item,classNames:`${className??\"\"} ${isEmpty?\"empty\":\"\"} ${isSelected?\"selected\":\"\"} ${isToggled?\"toggled\":\"\"}`.trim(),fill:isEmpty?emptyColor:colorFunction(colors,index),opacity:isSelected&&!toggleSelect?0.5:1,stroke:isEmpty?emptyColor:strokeColor,clickHandlers:interactive?{onClick:()=>{if((selected===null||selected===void 0?void 0:selected.label)===label){const toggle=clickToggle?!toggleSelect:false;setSelected(item);setToggleSelect(toggle);onClick(item,toggle)}},onMouseEnter:()=>{if(!toggleSelect){setSelected(item);onMouseEnter(item)}},onMouseLeave:()=>{if(!toggleSelect){onMouseLeave(item)}}}:undefined}],total:total+value}},{angle:0,dataWithRenderProps:[]});return/*#__PURE__*/React.createElement(DonutChartContext.Provider,{value:{className,emptyOffset,graphWidth,innerRadius,outerRadius,selected,selectedOffset,toggledOffset,toggleSelect,total,width}},/*#__PURE__*/React.createElement(\"svg\",{className:className,style:{height,width},viewBox:`0 0 ${width} ${height}`},/*#__PURE__*/React.createElement(\"g\",{className:`${className}-arcs`},dataWithRenderProps.map(item=>/*#__PURE__*/React.createElement(ArcPath,{item:item,key:`arcpath${item.index}`}))),selected&&/*#__PURE__*/React.createElement(\"g\",{className:`${className}-innertext`},/*#__PURE__*/React.createElement(\"text\",{className:`${className}-innertext-label`,x:graphWidth/2,y:\"45%\",textAnchor:\"middle\"},selected.label),/*#__PURE__*/React.createElement(\"text\",{className:`${className}-innertext-value`,x:graphWidth/2,y:\"60%\",textAnchor:\"middle\"},formatValues(selected.value,total))),legend&&/*#__PURE__*/React.createElement(\"g\",{className:`${className}-legend`},dataWithRenderProps.map(item=>/*#__PURE__*/React.createElement(LegendItem,{key:`legenditem${item.index}`,item:item})))))};export default DonutChart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}